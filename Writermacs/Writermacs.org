* Package Initialization and Bootstrapping
** Package Initialization and Extra Sources
I am adding extra sources to my package archives here.

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives '(("org"   . "http://orgmode.org/elpa/")
                         ("gnu"   . "http://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
(package-initialize)
#+END_SRC

** Bootstrapping
Here is where I am using the bootstrapping with use-package.

#+BEGIN_SRC emacs-lisp
;; Bootstrap `use-package`
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC
* Package Installation
** Functionality
*** Evil-Mode
Evil-Mode lets me use the vim keybindings in emacs.
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+END_SRC

**** Imenu-List
Imenu-list allows me to get an overview of my code or outline for an
AAR/novel. Here I enable it and install it.

#+BEGIN_SRC emacs-lisp
(use-package imenu-list
:ensure t
:config
(setq-default imenu-list-position "left"))
;(imenu-list-minor-mode t)
#+END_SRC

**** Which-Key
Which-key enables me to see what keys I can use.
#+BEGIN_SRC emacs-lisp
(use-package which-key
:ensure t
:config
(which-key-mode 1))
#+END_SRC

**** Magit
Magit enables me to use git while in emacs. I enable it and install it here.
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t)
#+END_SRC

**** All-The-Icons
Here I enable all-the-icons.
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
:ensure t)
#+END_SRC

**** Projectile
Projectile is a way of using projects in emacs.
#+BEGIN_SRC emacs-lisp
(use-package projectile
:ensure t)
#+END_SRC

**** Dashboard
Dashboard lets me see recent files as well as projects.
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
#+END_SRC
**** General.el

#+BEGIN_SRC emacs-lisp
(use-package general
:ensure t)
#+END_SRC

**** Unfill
For toggling fill and unfill.
#+BEGIN_SRC emacs-lisp
(use-package unfill
:ensure t)
#+END_SRC
**** YASnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
:ensure t)
#+END_SRC

** Appearance
*** Theme
I usually like the solarized-theme, but use whatever you want to here.
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
:ensure t)
#+END_SRC
*** Modeline
I like Doom modeline here because it includes a word count straight out of the box.
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
:ensure t)
#+END_SRC
** Writing Aid Packages
*** Writegood-Mode
#+BEGIN_SRC emacs-lisp
(use-package writegood-mode
:ensure t)
#+END_SRC
*** Writeroom-Mode
Writeroom-Mode is a minor mode for distraction-free writing.
#+BEGIN_SRC emacs-lisp
(use-package writeroom-mode
:ensure t)
#+END_SRC
** Completion Packages
*** Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
:ensure t
:config
(ivy-mode 1))
#+END_SRC

*** Counsel
Counsel allows us to utilize ivy by replacing many built-in and common
functions with richer versions. Letâ€™s install it!

#+BEGIN_SRC emacs-lisp
;(use-package counsel-projectile)
(use-package counsel
:ensure t)
#+END_SRC

*** Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :commands (swiper swiper-all))
#+END_SRC

** Org Packages
*** Org
I want to keep org-mode as up to date as I can.
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :pin org
  :defer t)

;; Ensure ELPA org is prioritized above built-in org.
(require 'cl)
(setq load-path (remove-if (lambda (x) (string-match-p "org$" x)) load-path))
#+END_SRC

*** Org Bullets
This allows for better org-mode bullets.
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:after org
:ensure t)
#+END_SRC
*** Org-TOC
Allows for a TOC to be generated in an org file.
#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :after org
  :init (add-hook 'org-mode-hook #'toc-org-enable))
#+END_SRC
* Specific Functions
** Find Config File
This file lets me edit my configuration file.

#+BEGIN_SRC emacs-lisp
(defun edit-emacs-config ()
  (interactive)
  (find-file "~/.emacs.d/jmacs.org"))
#+END_SRC

** Use Y/N or y/n for yes/no
Here is a way I can use "y" or "n" to answer yes or no.
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Word-Count
#+BEGIN_SRC emacs-lisp
(defun wordCount (&optional begin end)
  "count words between BEGIN and END (region); if no region defined, count words in buffer"
  (interactive "r")
  (let ((b (if mark-active begin (point-min)))
      (e (if mark-active end (point-max))))
    (message "%s words" (how-many "\\w+" b e))))
#+END_SRC
** Right-Align Modebar
#+BEGIN_SRC emacs-lisp
(defun simple-mode-line-render (left right)
  "Return a string of `window-width' length containing LEFT, and RIGHT
 aligned respectively."
  (let* ((available-width (- (window-width) (length left) 2)))
    (format (format " %%s %%%ds " available-width) left right)))
#+END_SRC

* UI and Appearance
** Theme
I like to use solarized, but use whatever the hell you want.
#+BEGIN_SRC emacs-lisp
(load-theme 'solarized-dark t)
#+END_SRC

** Font
I like to use Inconsolata.
#+BEGIN_SRC emacs-lisp 
(setq)
#+END_SRC

** Programming Packages

